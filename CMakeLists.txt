# SPDX-License-Identifier: Apache-2.0

project(baremetal_crt)

cmake_minimum_required(VERSION 3.16)
enable_language(C ASM)

# Check ARCH
if(NOT DEFINED ARCH)
  message(FATAL_ERROR "ARCH is not defined. Please set -DARCH= option.")
endif()
if(NOT EXISTS ${CMAKE_SOURCE_DIR}/arch/${ARCH})
  message(FATAL_ERROR "ARCH '${ARCH}' is not supported.")
endif()

# Check CROSS_COMPILE
if(NOT DEFINED CROSS_COMPILE)
  message(FATAL_ERROR "CROSS_COMPILE is not defined. Please set -DCROSS_COMPILE= option.")
endif()

# Common settings
set(PRJ_LIB_NAME bmetal_crt)
set(PRJ_CONFIG_NAME config_cur)
set(PRJ_CONFIG_CACHE_NAME config_cache)
set(PRJ_CONFIG_NOTIFY_NAME config_notify.cmake)
set(PRJ_DEFCONFIG_NAME defconfig)
set(PRJ_AUTOCONF_H_NAME autoconf.h)
set(PRJ_LINKER_SCRIPT_NAME linker.ld)
set(PRJ_GEN_LINKER_SCRIPT_NAME linker_gen.ld)

# CMake basic tools to add/use directories, sources and configs
include(${CMAKE_SOURCE_DIR}/cmake/tools.cmake)

# Target: Library
add_library(${PRJ_LIB_NAME} STATIC)


# File path for Kconfig
set(PRJ_CONFIG_FILE ${CMAKE_BINARY_DIR}/${PRJ_CONFIG_NAME})
set(PRJ_CONFIG_CACHE_FILE ${CMAKE_BINARY_DIR}/${PRJ_CONFIG_CACHE_NAME})
set(PRJ_CONFIG_NOTIFY_FILE ${CMAKE_BINARY_DIR}/${PRJ_CONFIG_NOTIFY_NAME})
set(PRJ_AUTOCONF_H_FILE ${CMAKE_BINARY_DIR}/include/bmetal/generated/${PRJ_AUTOCONF_H_NAME})
set(PRJ_DEFCONFIG_FILE ${CMAKE_SOURCE_DIR}/${PRJ_DEFCONFIG_NAME})

# Target: Default config
# TODO: Use suitable tools for Kconfig
add_custom_target(
  defconfig
  COMMAND cp ${CMAKE_SOURCE_DIR}/config ${PRJ_CONFIG_FILE}
  COMMAND touch ${PRJ_CONFIG_NOTIFY_FILE}
  )

# Target: Config
# TODO: Use suitable tools for Kconfig
add_custom_target(
  config
  COMMAND touch ${PRJ_CONFIG_NOTIFY_FILE}
  )

# Run defconfig silently and create cache if each file does not exist
# TODO: Use suitable tools for Kconfig
if(NOT EXISTS ${PRJ_CONFIG_FILE})
  execute_process(
    COMMAND cp ${CMAKE_SOURCE_DIR}/config ${PRJ_CONFIG_FILE}
    COMMAND cp ${CMAKE_SOURCE_DIR}/config ${PRJ_CONFIG_CACHE_FILE}
    )
endif()
execute_process(
  COMMAND cp ${PRJ_CONFIG_FILE} ${PRJ_CONFIG_CACHE_FILE}
  )
file(WRITE ${PRJ_CONFIG_NOTIFY_FILE} "")
include(${PRJ_CONFIG_NOTIFY_FILE})

# Target: Cache of config
# If config is changed, run cmake again.
add_custom_target(
  cache_config
  COMMAND
    ${CMAKE_COMMAND} -E compare_files
      "${PRJ_CONFIG_FILE}" "${PRJ_CONFIG_CACHE_FILE}" ";"
    if [ $$? -ne 0 ]; then
      ${CMAKE_COMMAND} -E copy
        ${PRJ_CONFIG_FILE} ${PRJ_CONFIG_CACHE_FILE} ";"
      ${CMAKE_COMMAND} -E touch
        ${PRJ_CONFIG_NOTIFY_FILE} ";"
      ${CMAKE_MAKE_PROGRAM} ";"
    fi
  )
add_dependencies(${PRJ_LIB_NAME} cache_config)

# Import configs
# After that, we can use CONFIG_ABCD variables in CMake
import_config(${PRJ_CONFIG_FILE})

set(ARCH_DIR ${CMAKE_SOURCE_DIR}/arch/${ARCH})
set(SOC_DIR ${ARCH_DIR}/${CONFIG_SOC_NAME})
set(BOARD_DIR ${CMAKE_SOURCE_DIR}/boards/${ARCH}/${CONFIG_BOARD_NAME})

### TODO: config and autoconf.h should be generated by suitable tools
write_autoconf(${PRJ_CONFIG_FILE} ${PRJ_AUTOCONF_H_FILE})
###


# File path for linker script
set(BOARD_LINKER_SCRIPT_FILE ${BOARD_DIR}/${PRJ_LINKER_SCRIPT_NAME})
set(SOC_LINKER_SCRIPT_FILE ${SOC_DIR}/${PRJ_LINKER_SCRIPT_NAME})
if(EXISTS ${BOARD_LINKER_SCRIPT_FILE})
  set(PRJ_LINKER_SCRIPT_FILE ${BOARD_LINKER_SCRIPT_FILE})
else()
  set(PRJ_LINKER_SCRIPT_FILE ${SOC_LINKER_SCRIPT_FILE})
endif()
if(NOT EXISTS ${PRJ_LINKER_SCRIPT_FILE})
  message(FATAL_ERROR "A linker script '${PRJ_LINKER_SCRIPT_FILE}' is not exists.")
endif()

set(PRJ_GEN_LINKER_SCRIPT_FILE ${CMAKE_BINARY_DIR}/include/bmetal/generated/${PRJ_GEN_LINKER_SCRIPT_NAME})

# Target: Linker script
add_custom_command(
  OUTPUT ${PRJ_GEN_LINKER_SCRIPT_FILE}
  DEPENDS ${PRJ_LINKER_SCRIPT_FILE}
  COMMAND
    ${CMAKE_C_COMPILER}
    -I ${CMAKE_SOURCE_DIR}/include
    -I ${CMAKE_BINARY_DIR}/include
    -DLINKER_SCRIPT
    -E -P -x c -o ${PRJ_GEN_LINKER_SCRIPT_FILE}
    ${PRJ_LINKER_SCRIPT_FILE}
  )
prj_sources(
  ${PRJ_GEN_LINKER_SCRIPT_FILE}
  )


# Compiler settings
if("${CC}" STREQUAL "gcc")
  include(${CMAKE_SOURCE_DIR}/cmake/gcc.cmake)
endif()

# Install, include settings
install(
  TARGETS ${PRJ_LIB_NAME}
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
  )
install(
  DIRECTORY
  ${CMAKE_SOURCE_DIR}/include/bmetal
  ${CMAKE_BINARY_DIR}/include/bmetal
  TYPE INCLUDE
  )
target_include_directories(${PRJ_LIB_NAME}
  PRIVATE ${CMAKE_SOURCE_DIR}/include
  PRIVATE ${CMAKE_BINARY_DIR}/include
  )

add_subdirectory(arch)
add_subdirectory(sys)
add_subdirectory(boards)
add_subdirectory(drivers)
